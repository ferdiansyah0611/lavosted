/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/*! exports provided: L, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"L\", function() { return L; });\n\r\n/**\r\n * @host ferdiansyah0611.github.com\r\n * @version 1.1-beta\r\n * @license MIT\r\n */\r\n/*css*/\r\n\r\nconst apps = {};\r\n\r\nclass L {\r\n    constructor(__application__) {\r\n        this.__application__ = __application__;\r\n        this.store = function(__data) {\r\n            return apps.data = __data;\r\n        }\r\n        /**\r\n         * @function init\r\n         * @version 1.0-beta\r\n         * @param {*} data \r\n         **/\r\n        this.init = function(data) {\r\n            try {\r\n                if (data.csrf !== undefined) {\r\n                    if (data.csrf.name || data.csrf.token) {\r\n                        this.security(data.csrf.name, data.csrf.token);\r\n                    }\r\n                }\r\n                if (data.run !== undefined) {\r\n                    if (data.run == 'development') {\r\n                        console.info('You are running Lavosted in development mode.' + \"\\n\" + 'Make sure to turn on production mode when deploying for production' + \"\\n\" + 'More info visit https://github.com/ferdiansyah0611/Lavosted-Frameworks');\r\n                    } else if (data.run == 'production') {}\r\n                }\r\n                if (data.responsive !== undefined) {\r\n                    this.src({ name: 'viewport', content: 'width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, shrink-to-fit=no' }).meta();\r\n                }\r\n                if (data.headers !== undefined) {\r\n                    active.data_headers.push(data.headers.Authorization);\r\n                }\r\n            } catch (e) {\r\n                throw Error(e.stack);\r\n            }\r\n        }\r\n    }\r\n    url() {\r\n        let app = {\r\n            on: window.location.href,\r\n            base: window.location.origin,\r\n            reload: function() {\r\n                return window.location.reload();\r\n            },\r\n            replace: function() {\r\n                return window.location.replace()\r\n            }\r\n        };\r\n        return Object.assign(app);\r\n    }\r\n    dom() {\r\n        var o = []\r\n        var app = document.body.querySelectorAll(this.__application__);\r\n        app.forEach((val, key) => {\r\n            o.push(val);\r\n        });\r\n        return o;\r\n    }\r\n    id(__defined) {\r\n        let data_id = {};\r\n        /*dom*/\r\n        data_id.get = function() {\r\n            try {\r\n                return document.getElementById(__defined);\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*height*/\r\n        data_id.height = function() {\r\n            try {\r\n                return document.getElementById(__defined).offsetHeight;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*width*/\r\n        data_id.width = function() {\r\n            try {\r\n                return document.getElementById(__defined).offsetWidth;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*parent*/\r\n        data_id.parent = function() {\r\n            try {\r\n                return document.getElementById(__defined).offsetParent;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*val*/\r\n        data_id.val = function(append = '') {\r\n            if (append !== '') {\r\n                try {\r\n                    return document.getElementById(__defined).value = append;\r\n                } catch (e) { console.error(e.message); }\r\n            } else { return document.getElementById(__defined).value; }\r\n        }\r\n        /*delete*/\r\n        data_id.del = function() {\r\n            try {\r\n                return document.getElementById(__defined).remove();\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*attribute*/\r\n        data_id.attr = function(append = '', value = '') {\r\n            try {\r\n                var app = document.getElementById(__defined).getAttribute(append);\r\n                if (app == null) {\r\n                    throw Error('parameter exception');\r\n                }\r\n                if (append !== '') {\r\n                    if (value !== '') {\r\n                        document.getElementById(__defined).setAttribute(append, value);\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*add class*/\r\n        data_id.addClass = function($class) {\r\n            try {\r\n                return document.getElementById(__defined).classList.add($class);\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*remove class*/\r\n        data_id.removeClass = function($class) {\r\n            try {\r\n                return document.getElementById(__defined).classList.remove($class);\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*toggle class*/\r\n        data_id.toggleClass = function($class) {\r\n            try {\r\n                return document.getElementById(__defined).classList.toggle($class);\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*add css*/\r\n        data_id.css = function(data) {\r\n            try {\r\n                if (typeof data == 'string') {\r\n                    return document.getElementById(__defined).setAttribute('style', data);\r\n                }\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*add text*/\r\n        data_id.text = function(data) {\r\n            try {\r\n                return document.getElementById(__defined).innerText = data;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*html*/\r\n        data_class.html = function(data) {\r\n            try {\r\n                return document.getElementById(__defined).innerHTML = data;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        return Object.create(data_id);\r\n    }\r\n    class(__defined) {\r\n        let data_class = {};\r\n        var app = document.body.getElementsByClassName(__defined);\r\n        var array = [];\r\n        /*dom*/\r\n        data_class.get = function() {\r\n            try {\r\n                for (var i = 0; i < app.length; i++) {\r\n                    array.push(app[i]);\r\n                }\r\n                return array;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*height*/\r\n        data_class.height = function() {\r\n            try {\r\n                for (var i = 0; i < app.length; i++) {\r\n                    array.push(app[i].offsetHeight);\r\n                }\r\n                return array;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*width*/\r\n        data_class.width = function() {\r\n            try {\r\n                for (var i = 0; i < app.length; i++) {\r\n                    array.push(app[i].offsetWidth);\r\n                }\r\n                return array;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*parent*/\r\n        data_class.parent = function() {\r\n            try {\r\n                for (var i = 0; i < app.length; i++) {\r\n                    array.push(app[i].offsetParent);\r\n                }\r\n                return array;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*val*/\r\n        data_class.val = function(append = '') {\r\n            try {\r\n                if (append !== '') {\r\n                    for (var i = 0; i < app.length; i++) {\r\n                        array.push(app[i].value = append);\r\n                    }\r\n                    return true;\r\n                } else {\r\n                    for (var i = 0; i < app.length; i++) {\r\n                        array.push(app[i].value);\r\n                    }\r\n                    return array;\r\n                }\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*delete*/\r\n        data_class.del = function() {\r\n            try {\r\n                for (var i = 0; i < app.length; i++) {\r\n                    array.push(app[i]);\r\n                }\r\n                array.forEach((val, key) => {\r\n                    val.remove();\r\n                });\r\n                return true;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*attribute*/\r\n        data_class.attr = function(append = '', value = '') {\r\n            try {\r\n                if (value !== '') {\r\n                    for (var i = 0; i < app.length; i++) {\r\n                        array.push(app[i]);\r\n                    }\r\n                    array.forEach((val, key) => {\r\n                        val.setAttribute(append, value);\r\n                    });\r\n                    return true;\r\n                } else {\r\n                    for (var i = 0; i < app.length; i++) {\r\n                        array.push(app[i]);\r\n                    }\r\n                    array.forEach((val, key) => {\r\n                        val.getAttribute(append);\r\n                    });\r\n                    return array;\r\n                }\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*add class*/\r\n        data_class.addClass = function($class) {\r\n            try {\r\n                for (var i = 0; i < app.length; i++) {\r\n                    app[i].classList.add($class);\r\n                }\r\n                return true;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*remove class*/\r\n        data_class.removeClass = function($class) {\r\n            try {\r\n                for (var i = 0; i < app.length; i++) {\r\n                    app[i].classList.remove($class);\r\n                }\r\n                return true;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*toggle class*/\r\n        data_class.toggleClass = function($class) {\r\n            try {\r\n                for (var i = 0; i < app.length; i++) {\r\n                    app[i].classList.toggle($class);\r\n                }\r\n                return true;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*add css*/\r\n        data_class.css = function(data) {\r\n            try {\r\n                if (typeof data == 'string') {\r\n                    for (var i = 0; i < app.length; i++) {\r\n                        app[i].setAttribute('style', data);\r\n                    }\r\n                    return true;\r\n                }\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*add text*/\r\n        data_class.text = function(data) {\r\n            try {\r\n                for (var i = 0; i < app.length; i++) {\r\n                    app[i].innerText = data;\r\n                }\r\n                return true;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*html*/\r\n        data_class.html = function(data) {\r\n            try {\r\n                for (var i = 0; i < app.length; i++) {\r\n                    app[i].innerHTML = data;\r\n                }\r\n                return true;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*length*/\r\n        data_class.length = app.length;\r\n        return Object.assign(data_class);\r\n    }\r\n    query(data) {\r\n        let data_query = {};\r\n        var app = document.body.querySelectorAll(data);\r\n        var array = [];\r\n        /*dom*/\r\n        data_query.get = function() {\r\n            try {\r\n                app.forEach((val, key) => {\r\n                    array.push(val);\r\n                });\r\n                return array;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*height*/\r\n        data_query.height = function() {\r\n            try {\r\n                app.forEach((val, key) => {\r\n                    array.push(val.offsetHeight);\r\n                });\r\n                return array;\r\n            } catch (e) { console.error(e.message); }\r\n            try {\r\n                return document.getElementById(defined).offsetHeight;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*width*/\r\n        data_query.width = function() {\r\n            try {\r\n                app.forEach((val, key) => {\r\n                    array.push(val.offsetWidth);\r\n                });\r\n                return array;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*parent*/\r\n        data_query.parent = function() {\r\n            try {\r\n                app.forEach((val, key) => {\r\n                    array.push(val.offsetParent);\r\n                });\r\n                return array;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*val*/\r\n        data_query.val = function(append = '') {\r\n            if (append !== '') {\r\n                try {\r\n                    app.forEach((val, key) => {\r\n                        val.value = append;\r\n                    });\r\n                    return true;\r\n                } catch (e) { console.error(e.message); }\r\n            } else {\r\n                app.forEach((val, key) => {\r\n                    array.push(val.value);\r\n                });\r\n                return array;\r\n            }\r\n        }\r\n        /*delete*/\r\n        data_query.del = function() {\r\n            try {\r\n                app.forEach((val, key) => {\r\n                    val.remove();\r\n                });\r\n                return true;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*attribute*/\r\n        data_query.attr = function(append = '', value = '') {\r\n            try {\r\n                if (append !== '') {\r\n                    if (value !== '') {\r\n                        app.forEach((val, key) => {\r\n                            val.setAttribute(append, value);\r\n                        });\r\n                        return true;\r\n                    } else {\r\n                        app.forEach((val, key) => {\r\n                            array.push(val.getAttribute(append));\r\n                        });\r\n                        return array;\r\n                    }\r\n                }\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*add class*/\r\n        data_query.addClass = function($class) {\r\n            try {\r\n                app.forEach((val, key) => {\r\n                    val.classList.add($class);\r\n                });\r\n                return true;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*remove class*/\r\n        data_query.removeClass = function($class) {\r\n            try {\r\n                app.forEach((val, key) => {\r\n                    val.classList.remove($class);\r\n                });\r\n                return true;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*toggle class*/\r\n        data_query.toggleClass = function($class) {\r\n            try {\r\n                app.forEach((val, key) => {\r\n                    val.classList.toggle($class);\r\n                });\r\n                return true;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*add css*/\r\n        data_query.css = function(data) {\r\n            try {\r\n                if (typeof data == 'string') {\r\n                    app.forEach((val, key) => {\r\n                        val.setAttribute('style', data);\r\n                    });\r\n                    return true;\r\n                }\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*add text*/\r\n        data_query.text = function(data) {\r\n            try {\r\n                app.forEach((val, key) => {\r\n                    val.innerText = data;\r\n                });\r\n                return true;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        /*html*/\r\n        data_query.html = function(data) {\r\n            try {\r\n                app.forEach((val, key) => {\r\n                    val.innerHTML = data;\r\n                });\r\n                return true;\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        return Object.assign(data_query);\r\n    }\r\n    /**\r\n     * @function src\r\n     * @version 1.0-beta\r\n     * @param {*} source \r\n     **/\r\n    src(source) {\r\n        var data = {};\r\n        var app;\r\n        data.link = function() {\r\n            window.addEventListener('DOMContentLoaded', function() {\r\n                app = document.createElement('link');\r\n                app.rel = 'stylesheet';\r\n                app.type = 'text/css';\r\n                app.href = source;\r\n                document.head.appendChild(app);\r\n                apps.resources = [source];\r\n            });\r\n        }\r\n        data.script = function() {\r\n            window.addEventListener('DOMContentLoaded', function() {\r\n                app = document.createElement('script');\r\n                app.type = 'text/javascript';\r\n                app.src = source;\r\n                document.body.appendChild(app);\r\n                apps.resources = [source];\r\n            });\r\n        }\r\n        data.meta = function() {\r\n            window.addEventListener('DOMContentLoaded', function() {\r\n                app = document.createElement('meta');\r\n                app.name = source.name;\r\n                app.content = source.content;\r\n                document.head.appendChild(app);\r\n            });\r\n        }\r\n        data.style = function() {\r\n            window.addEventListener('DOMContentLoaded', function() {\r\n                app = document.createElement('style');\r\n                app.type = 'text/css';\r\n                app.innerText = source;\r\n                document.head.appendChild(app);\r\n            });\r\n        }\r\n        return Object.create(data);\r\n    }\r\n    /**\r\n     * @function api\r\n     * @version 1.1-beta\r\n     * @param {*} url \r\n     **/\r\n    api(url) {\r\n        let data = {};\r\n        data.get = function(object) {\r\n            try {\r\n                let xhr = new XMLHttpRequest();\r\n                /*onloadstart*/\r\n                xhr.onloadstart = function() {\r\n                    if (typeof object.start == 'function') {\r\n                        object.start();\r\n                    }\r\n                }\r\n                /*onprogress*/\r\n                xhr.onprogress = function() {\r\n                    if (typeof object.progress == 'function') {\r\n                        object.progress();\r\n                    }\r\n                }\r\n                /*onload*/\r\n                xhr.onload = function() {\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        object.success(this.response);\r\n                    } else {\r\n                        object.error(xhr.response, xhr.status);\r\n                    }\r\n                }\r\n                /*cache*/\r\n                if (object.cache == true) {\r\n                    xhr.open('GET', url, true);\r\n                }\r\n                /*no cache*/\r\n                if (object.cache == false || object.cache == null || object.cache == undefined) {\r\n                    xhr.open('GET', url + '?_=' + new L().date().time(), true)\r\n                }\r\n                /*headers*/\r\n                if (object.headers !== undefined) {\r\n                    for (let i = 0; i < object.headers.length; i++) {\r\n                        const header = object.headers[i];\r\n                        xhr.setRequestHeader(header.name, header.value);\r\n                    }\r\n                }\r\n                /*multipart*/\r\n                if (object.multipart == true) {\r\n                    xhr.setRequestHeader('Content-Type', 'multipart/form-data');\r\n                }\r\n                xhr.send();\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        data.post = function(object) {\r\n            try {\r\n                let xhr = new XMLHttpRequest();\r\n                /*onloadstart*/\r\n                xhr.onloadstart = function() {\r\n                    if (typeof object.start == 'function') {\r\n                        object.start();\r\n                    }\r\n                }\r\n                /*onprogress*/\r\n                xhr.onprogress = function() {\r\n                    if (typeof object.progress == 'function') {\r\n                        object.progress();\r\n                    }\r\n                }\r\n                /*onload*/\r\n                xhr.onload = function() {\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        object.success(this.response);\r\n                    } else {\r\n                        object.error(xhr.response, xhr.status);\r\n                    }\r\n                }\r\n                /*cache*/\r\n                if (object.cache == true) {\r\n                    xhr.open(object.post, url, true);\r\n                }\r\n                /*no cache*/\r\n                if (object.cache == false || object.cache == null || object.cache == undefined) {\r\n                    xhr.open(object.post, url + '?_=' + new L().date().time(), true)\r\n                }\r\n                /*headers*/\r\n                if (object.headers !== undefined) {\r\n                    for (let i = 0; i < object.headers.length; i++) {\r\n                        const header = object.headers[i];\r\n                        xhr.setRequestHeader(header.name, header.value);\r\n                    }\r\n                }\r\n                /*multipart*/\r\n                if (object.multipart == true) {\r\n                    xhr.setRequestHeader('Content-Type', 'multipart/form-data');\r\n                }\r\n                xhr.send(object.data);\r\n            } catch (e) { console.error(e.message); }\r\n        }\r\n        return Object.create(data);\r\n    }\r\n    /**\r\n     * @function local\r\n     * @version 1.0-beta\r\n     * @param {*} data \r\n     **/\r\n    local(data = {}) {\r\n        try {\r\n            if (data.type == 'get') { var app = window.localStorage.getItem(data.name);\r\n                data.success(app); } else if (data.type == 'set') { return window.localStorage.setItem(data.name, data.data); }\r\n        } catch (e) { console.error(e.message); }\r\n    }\r\n    /**\r\n     * @function session\r\n     * @version 1.0-beta\r\n     * @param {*} data \r\n     **/\r\n    session(data = {}) {\r\n        try {\r\n            if (data.type == 'get') { var app = window.sessionStorage.getItem(data.name);\r\n                data.success(app); } else if (data.type == 'set') { return window.sessionStorage.setItem(data.name, data.data); }\r\n        } catch (e) { console.error(e.message); }\r\n    }\r\n    /**\r\n     * @function html\r\n     * @version 1.1-beta\r\n     * @param {*} first_element\r\n     * @param {*} to_element\r\n     * @param {*} data\r\n     * @param {*} tag_close\r\n     **/\r\n    html(first_element, to_element, data, tag_close = '') {\r\n        try {\r\n            if (tag_close !== '') {\r\n                var query = document.body.querySelector(to_element);\r\n                var app = document.createElement(first_element);\r\n                app.innerHTML = data + tag_close;\r\n                query.appendChild(app);\r\n            } else {\r\n                var query = document.body.querySelector(to_element);\r\n                var app = document.createElement(first_element);\r\n                app.innerHTML = data;\r\n                query.appendChild(app);\r\n            }\r\n        } catch (e) {\r\n            throw Error(e);\r\n        }\r\n    }\r\n    static error() {\r\n\r\n    }\r\n    /* \r\n    * new event on in here\r\n    */\r\n    on(__event__, call) {\r\n        switch (__event__) {\r\n            case 'click':\r\n                this.dom().forEach((val, key) => {\r\n                    val.addEventListener('click', function(e) { call(); });\r\n                });\r\n                break;\r\n            case 'abort':\r\n                document.body.querySelector(this.__application__).addEventListener('abort', function(e) { call(); });\r\n                break;\r\n            case 'load':\r\n                document.body.querySelector(this.__application__).addEventListener('load', function(e) { call(); });\r\n                break;\r\n            case 'beforeunload':\r\n                document.body.querySelector(this.__application__).addEventListener('beforeunload', function(e) { call(); });\r\n                break;\r\n            case 'unload':\r\n                document.body.querySelector(this.__application__).addEventListener('unload', function(e) { call(); });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @function event\r\n     * @version 1.1-beta\r\n     * @param {*} data \r\n     **/\r\n    event(data) {\r\n        /**\r\n         * resource event = error, abort, load, beforeunload, unload\r\n         * network event = online, offilne\r\n         * focus event = focus, blur, focusin, focusout\r\n         * websocket event = open, message, close\r\n         * form event = reset, submit\r\n         * view event = resize, scroll,\r\n         * clipboard = cut, paste, copy\r\n         * keyboard event = keydown, keypress, keyup\r\n         * mouse event = auxclick, click, dbclick, mousedown, mouseenter, mouseleave,mousemove, mouseover, mouseout, mouseup\r\n         * drag drop event = drag, dragend, dragenter, dragstart, dragleave, dragover, drop\r\n         **/\r\n        let data_event = {};\r\n        var query = document.querySelector(data);\r\n        /*resource event data*/\r\n        const error = function(call) { query.addEventListener('error', function(e) { call(); }); }\r\n        const abort = function(call) { query.addEventListener('abort', function(e) { call(); }); }\r\n        const load = function(call) { query.addEventListener('load', function(e) { call(); }); }\r\n        const beforeunload = function(call) { query.addEventListener('beforeunload', function(e) { call(); }); }\r\n        const unload = function(call) { query.addEventListener('unload', function(e) { call(); }); }\r\n        /*network event data*/\r\n        const online = function(call) { query.addEventListener('online', function(e) { call(); }); }\r\n        const offline = function(call) { query.addEventListener('offline', function(e) { call(); }); }\r\n        /*focus event data*/\r\n        const focus = function(call) { query.addEventListener('focus', function(e) { call(); }); }\r\n        const blur = function(call) { query.addEventListener('blur', function(e) { call(); }); }\r\n        const focusin = function(call) { query.addEventListener('focusin', function(e) { call(); }); }\r\n        const focusout = function(call) { query.addEventListener('focusout', function(e) { call(); }); }\r\n        /*form event data*/\r\n        const reset = function(call) { query.addEventListener('reset', function(e) { call(); }); }\r\n        const submit = function(call) { query.addEventListener('submit', function(e) { call(); }); }\r\n        const change = function(call) { query.addEventListener('change', function(e) { call(); }); }\r\n        /*view event data*/\r\n        const resize = function(call) { query.addEventListener('resize', function(e) { call(); }); }\r\n        const scroll = function(call) { query.addEventListener('scroll', function(e) { call(); }); }\r\n        /*clipboard event data*/\r\n        const cut = function(call) { query.addEventListener('cut', function(e) { call(); }); }\r\n        const paste = function(call) { query.addEventListener('paste', function(e) { call(); }); }\r\n        const copy = function(call) { query.addEventListener('copy', function(e) { call(); }); }\r\n        /*keyboard event data*/\r\n        const keydown = function(call) { query.addEventListener('keydown', function(e) { call(); }); }\r\n        const keyup = function(call) { query.addEventListener('keyup', function(e) { call(); }); }\r\n        const keypress = function(call) { query.addEventListener('keypress', function(e) { call(); }); }\r\n        /*mouse event data*/\r\n        const auxclick = function(call) { query.addEventListener('auxclick', function(e) { call(e); }); }\r\n        const click = function(call) { query.addEventListener('click', function(e) { call(e); }); }\r\n        const dbclick = function(call) { query.addEventListener('dbclick', function(e) { call(e); }); }\r\n        const mousedown = function(call) { query.addEventListener('mousedown', function(e) { call(e); }); }\r\n        const mouseenter = function(call) { query.addEventListener('mouseenter', function(e) { call(e); }); }\r\n        const mouseleave = function(call) { query.addEventListener('mouseleave', function(e) { call(e); }); }\r\n        const mousemove = function(call) { query.addEventListener('mousemove', function(e) { call(e); }); }\r\n        const mouseover = function(call) { query.addEventListener('mouseover', function(e) { call(e); }); }\r\n        const mouseout = function(call) { query.addEventListener('mouseout', function(e) { call(e); }); }\r\n        const mouseup = function(call) { query.addEventListener('mouseup', function(e) { call(e); }); }\r\n        /*drag drop event data */\r\n        const drag = function(call) { query.addEventListener('drag', function(e) { call(e); }); }\r\n        const dragend = function(call) { query.addEventListener('dragend', function(e) { call(e); }); }\r\n        const dragenter = function(call) { query.addEventListener('dragenter', function(e) { call(e); }); }\r\n        const dragstart = function(call) { query.addEventListener('dragstart', function(e) { call(e); }); }\r\n        const dragleave = function(call) { query.addEventListener('dragleave', function(e) { call(e); }); }\r\n        const dragover = function(call) { query.addEventListener('dragover', function(e) { call(e); }); }\r\n        const drop = function(call) { query.addEventListener('drop', function(e) { call(e); }); }\r\n        const DOMContentLoaded = function(call) { window.addEventListener('DOMContentLoaded', function(e) { call(e); }); }\r\n        /**\r\n         * @function on\r\n         * @version 1.1-beta\r\n         * @param type\r\n         * @param call\r\n         **/\r\n        data_event.on = function(type, call) {\r\n            try {\r\n                if (type == 'error') { error(call); }\r\n                if (type == 'abort') { abort(call); }\r\n                if (type == 'load') { load(call); }\r\n                if (type == 'beforeunload') { beforeunload(call); }\r\n                if (type == 'unload') { unload(call); }\r\n\r\n                if (type == 'offline') { offline(call); }\r\n                if (type == 'online') { online(call); }\r\n\r\n                if (type == 'focus') { focus(call); }\r\n                if (type == 'blur') { blur(call); }\r\n                if (type == 'focusin') { focusin(call); }\r\n                if (type == 'focusout') { focusout(call); }\r\n\r\n                if (type == 'reset') { reset(call); }\r\n                if (type == 'submit') { submit(call); }\r\n                if (type == 'change') { change(call); }\r\n\r\n                if (type == 'resize') { resize(call); }\r\n                if (type == 'scroll') { scroll(call); }\r\n\r\n                if (type == 'cut') { cut(call); }\r\n                if (type == 'paste') { paste(call); }\r\n                if (type == 'copy') { copy(call); }\r\n\r\n                if (type == 'keydown') { keydown(call); }\r\n                if (type == 'keyup') { keyup(call); }\r\n                if (type == 'keypress') { keypress(call); }\r\n\r\n                if (type == 'auxclick') { auxclick(call); }\r\n                if (type == 'click') { click(call); }\r\n                if (type == 'dbclick') { dbclick(call); }\r\n                if (type == 'mousedown') { mousedown(call); }\r\n                if (type == 'mouseenter') { mouseenter(call); }\r\n                if (type == 'mouseleave') { mouseleave(call); }\r\n                if (type == 'mousemove') { mousemove(call); }\r\n                if (type == 'mouseover') { mouseover(call); }\r\n                if (type == 'mouseout') { mouseout(call); }\r\n                if (type == 'mouseup') { mouseup(call); }\r\n\r\n                if (type == 'drag') { drag(call); }\r\n                if (type == 'dragend') { dragend(call); }\r\n                if (type == 'dragenter') { dragenter(call); }\r\n                if (type == 'dragstart') { dragstart(call); }\r\n                if (type == 'dragleave') { dragleave(call); }\r\n                if (type == 'dragover') { dragover(call); }\r\n                if (type == 'drop') { drop(call); }\r\n                if (type == 'DOMContentLoaded') { DOMContentLoaded(call); }\r\n            } catch (e) { console.error(e); }\r\n        }\r\n        data_event.error = function(call) { error(call); }\r\n        data_event.abort = function(call) { abort(call); }\r\n        data_event.load = function(call) { load(call); }\r\n        data_event.beforeunload = function(call) { beforeunload(call); }\r\n        data_event.unload = function(call) { unload(call); }\r\n        data_event.offline = function(call) { offline(call); }\r\n        data_event.online = function(call) { online(call); }\r\n        data_event.focus = function(call) { focus(call); }\r\n        data_event.blur = function(call) { blur(call); }\r\n        data_event.focusin = function(call) { focusin(call); }\r\n        data_event.focusout = function(call) { focusout(call); }\r\n        data_event.reset = function(call) { reset(call); }\r\n        data_event.submit = function(call) { submit(call); }\r\n        data_event.change = function(call) { change(call); }\r\n        data_event.resize = function(call) { resize(call); }\r\n        data_event.scroll = function(call) { scroll(call); }\r\n        data_event.cut = function(call) { cut(call); }\r\n        data_event.paste = function(call) { paste(call); }\r\n        data_event.copy = function(call) { copy(call); }\r\n        data_event.keydown = function(call) { keydown(call); }\r\n        data_event.keyup = function(call) { keyup(call); }\r\n        data_event.keypress = function(call) { keypress(call); }\r\n        data_event.auxclick = function(call) { auxclick(call); }\r\n        data_event.click = function(call) { click(call); }\r\n        data_event.dbclick = function(call) { dbclick(call); }\r\n        data_event.mousedown = function(call) { mousedown(call); }\r\n        data_event.mouseenter = function(call) { mouseenter(call); }\r\n        data_event.mouseleave = function(call) { mouseleave(call); }\r\n        data_event.mousemove = function(call) { mousemove(call); }\r\n        data_event.mouseover = function(call) { mouseover(call); }\r\n        data_event.mouseout = function(call) { mouseout(call); }\r\n        data_event.mouseup = function(call) { mouseup(call); }\r\n        data_event.drag = function(call) { drag(call); }\r\n        data_event.dragend = function(call) { dragend(call); }\r\n        data_event.dragenter = function(call) { dragenter(call); }\r\n        data_event.dragstart = function(call) { dragstart(call); }\r\n        data_event.dragleave = function(call) { dragleave(call); }\r\n        data_event.dragover = function(call) { dragover(call); }\r\n        data_event.drop = function(call) { drop(call); }\r\n        data_event.DOMContentLoaded = function(call) { DOMContentLoaded(call); }\r\n        return Object.assign(data_event);\r\n    }\r\n    /**\r\n     * @function date\r\n     * @version 1.1-beta \r\n     **/\r\n    date() {\r\n        let app = new Date();\r\n        let data_date = {};\r\n        data_date.date = function() { return app.getDate(); }\r\n        data_date.year = function() { return app.getFullYear() }\r\n        data_date.month = function() { return app.getMonth(); }\r\n        data_date.hours = function() { return app.getHours(); }\r\n        data_date.minutes = function() { return app.getMinutes(); }\r\n        data_date.seconds = function() { return app.getSeconds(); }\r\n        data_date.time = function() { return app.getTime(); }\r\n        data_date.now = function() { return app; }\r\n        return Object.create(data_date);\r\n    }\r\n    /**\r\n     * @function parse\r\n     * @version 1.0-beta\r\n     **/\r\n    parse() { return JSON.parse(this.__application__); }\r\n    /**\r\n     * @function stringify\r\n     * @version 1.0-beta\r\n     **/\r\n    stringify() { return JSON.stringify(this.__application__); }\r\n    interval(call, time) {\r\n        setInterval(function() {\r\n            call();\r\n        }, time);\r\n    }\r\n    timeout(call, time) {\r\n        setTimeout(function() {\r\n            call();\r\n        }, time);\r\n    }\r\n    isArray() {\r\n        if(typeof this.__application__ == 'object'){return true;}else{return false;}\r\n    }\r\n}\r\n\r\n/*prototype*/\r\nL.prototype.data = Object.assign(apps);\r\n/*instance*/\r\nvar Lavosted = new L();\r\n/*window.L = new L();*/\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Lavosted);\r\n\r\nwindow.L = function(__application__) {\r\n    return new L(__application__);\r\n}\r\n/*new L().__proto__.apas = 'ass'*/\n\n//# sourceURL=webpack:///./src/js/index.js?");

/***/ })

/******/ });