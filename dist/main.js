/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/lavosted.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/lavosted.js":
/*!****************************!*\
  !*** ./src/js/lavosted.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function(window) {\r\n    const ___apps = {};\r\n    const ___object = {};\r\n    const ___array = [];\r\n    var __this;\r\n\r\n    class Lavosted {\r\n        constructor(__application__) {\r\n            this.__application__ = __application__;\r\n            this.store = (__data__) => {\r\n                return ___apps.data = __data__;\r\n            }\r\n        }\r\n        /*static function*/\r\n        static dom(__data) {\r\n            let _array = [];\r\n            var __doms = document.body.querySelectorAll(__data);\r\n            __doms.forEach((val, key) => {\r\n                _array.push(val);\r\n            });\r\n            return _array;\r\n        }\r\n        /*ajax*/\r\n        api(url) {\r\n            let data = {};\r\n            data.get = function(object) {\r\n                try {\r\n                    let xhr = new XMLHttpRequest();\r\n                    /*onloadstart*/\r\n                    xhr.onloadstart = function() {\r\n                        if (typeof object.start == 'function') {\r\n                            object.start();\r\n                        }\r\n                    }\r\n                    /*onprogress*/\r\n                    xhr.onprogress = function() {\r\n                        if (typeof object.progress == 'function') {\r\n                            object.progress();\r\n                        }\r\n                    }\r\n                    /*onload*/\r\n                    xhr.onload = function() {\r\n                        if (xhr.status >= 200 && xhr.status < 300) {\r\n                            object.success(this.response);\r\n                        } else {\r\n                            object.error(xhr.response, xhr.status);\r\n                        }\r\n                    }\r\n                    /*cache*/\r\n                    if (object.cache == true) {\r\n                        xhr.open('GET', url, true);\r\n                    }\r\n                    /*no cache*/\r\n                    if (object.cache == false || object.cache == null || object.cache == undefined) {\r\n                        xhr.open('GET', url + '?_=' + new L().date().time(), true)\r\n                    }\r\n                    /*headers*/\r\n                    if (object.headers !== undefined) {\r\n                        for (let i = 0; i < object.headers.length; i++) {\r\n                            const header = object.headers[i];\r\n                            xhr.setRequestHeader(header.name, header.value);\r\n                        }\r\n                    }\r\n                    /*multipart*/\r\n                    if (object.multipart == true) {\r\n                        xhr.setRequestHeader('Content-Type', 'multipart/form-data');\r\n                    }\r\n                    xhr.send();\r\n                } catch (e) { console.error(e.message); }\r\n            }\r\n            data.post = function(object) {\r\n                try {\r\n                    let xhr = new XMLHttpRequest();\r\n                    /*onloadstart*/\r\n                    xhr.onloadstart = function() {\r\n                        if (typeof object.start == 'function') {\r\n                            object.start();\r\n                        }\r\n                    }\r\n                    /*onprogress*/\r\n                    xhr.onprogress = function() {\r\n                        if (typeof object.progress == 'function') {\r\n                            object.progress();\r\n                        }\r\n                    }\r\n                    /*onload*/\r\n                    xhr.onload = function() {\r\n                        if (xhr.status >= 200 && xhr.status < 300) {\r\n                            object.success(this.response);\r\n                        } else {\r\n                            object.error(xhr.response, xhr.status);\r\n                        }\r\n                    }\r\n                    /*cache*/\r\n                    if (object.cache == true) {\r\n                        xhr.open(object.post, url, true);\r\n                    }\r\n                    /*no cache*/\r\n                    if (object.cache == false || object.cache == null || object.cache == undefined) {\r\n                        xhr.open(object.post, url + '?_=' + new L().date().time(), true)\r\n                    }\r\n                    /*headers*/\r\n                    if (object.headers !== undefined) {\r\n                        for (let i = 0; i < object.headers.length; i++) {\r\n                            const header = object.headers[i];\r\n                            xhr.setRequestHeader(header.name, header.value);\r\n                        }\r\n                    }\r\n                    /*multipart*/\r\n                    if (object.multipart == true) {\r\n                        xhr.setRequestHeader('Content-Type', 'multipart/form-data');\r\n                    }\r\n                    xhr.send(object.data);\r\n                } catch (e) { console.error(e.message); }\r\n            }\r\n            return Object.create(data);\r\n        }\r\n        /*event*/\r\n        on(__event__, call) {\r\n            __this = Lavosted.dom(this.__application__);\r\n            switch (__event__) {\r\n                case 'click':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('click', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'abort':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('abort', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'load':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('abort', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'beforeunload':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('beforeunload', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'unload':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('unload', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'online':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('online', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'offline':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('offline', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'focus':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('focus', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'blur':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('blur', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'focusin':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('focusin', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'focusout':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('focusout', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'reset':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('reset', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'submit':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('submit', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'change':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('change', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'resize':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('resize', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'scroll':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('scroll', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'cut':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('cut', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'paste':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('paste', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'copy':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('copy', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'keydown':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('keydown', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'keyup':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('keyup', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'keypress':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('keypress', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'auxclick':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('auxclick', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'click':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('click', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'dbclick':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('dbclick', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'mousedown':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('mousedown', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'mouseenter':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('mouseenter', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'mouseleave':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('mouseleave', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'mousemove':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('mousemove', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'mouseover':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('mouseover', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'mouseout':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('mouseout', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'mouseup':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('mouseup', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'drag':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('drag', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'dragend':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('dragend', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'dragenter':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('dragenter', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'dragstart':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('dragstart', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'dragleave':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('dragleave', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'dragover':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('dragover', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'drop':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('drop', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                case 'DOMContentLoaded':\r\n                    __this.forEach((val, key) => {\r\n                        val.addEventListener('DOMContentLoaded', function(e) { call(e); });\r\n                    });\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        /*data dom*/\r\n        collection() {\r\n            return Lavosted.dom(this.__application__);\r\n        }\r\n        height() {\r\n            let _array = [];\r\n            __this = Lavosted.dom(this.__application__);\r\n            __this.forEach((val, key) => {\r\n                _array.push(val.offsetHeight);\r\n            });\r\n            return _array;\r\n        }\r\n        width() {\r\n            let _array = [];\r\n            __this = Lavosted.dom(this.__application__);\r\n            __this.forEach((val, key) => {\r\n                _array.push(val.offsetWidth);\r\n            });\r\n            return _array;\r\n        }\r\n        parent() {\r\n            let _array = [];\r\n            __this = Lavosted.dom(this.__application__);\r\n            __this.forEach((val, key) => {\r\n                _array.push(val.offsetParent);\r\n            });\r\n            return _array;\r\n        }\r\n        val(__data) {\r\n            try {\r\n                if (__data) {\r\n                    let _array = [];\r\n                    __this = Lavosted.dom(this.__application__);\r\n                    __this.forEach((val, key) => {\r\n                        val.value = __data;\r\n                    });\r\n                    return true;\r\n                } else {\r\n                    let _array = [];\r\n                    __this = Lavosted.dom(this.__application__);\r\n                    __this.forEach((val, key) => {\r\n                        _array.push(val.value);\r\n                    });\r\n                    if (_array[0] == undefined) {\r\n                        console.error('Type error : undefined data value');\r\n                        return false;\r\n                    } else {\r\n                        return _array;\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.error(e.message);\r\n            }\r\n        }\r\n        remove() {\r\n            let _array = [];\r\n            __this = Lavosted.dom(this.__application__);\r\n            __this.forEach((val, key) => {\r\n                val.remove();\r\n            });\r\n            return true;\r\n        }\r\n        attr(__name, __data) {\r\n            if (__name && __data) {\r\n                let _array = [];\r\n                __this = Lavosted.dom(this.__application__);\r\n                __this.forEach((val, key) => {\r\n                    val.setAttribute(__name, __data);\r\n                });\r\n                return true;\r\n            } else {\r\n                let _array = [];\r\n                __this = Lavosted.dom(this.__application__);\r\n                __this.forEach((val, key) => {\r\n                    _array.push(val.getAttribute(__name));\r\n                });\r\n                return _array;\r\n            }\r\n        }\r\n        addClass(__name) {\r\n            __this = Lavosted.dom(this.__application__);\r\n            __this.forEach((val, key) => {\r\n                var _split = __name.split(' ');\r\n                _split.forEach((v, k) => {\r\n                    val.classList.add(v);\r\n                });\r\n            });\r\n            return true;\r\n        }\r\n        removeClass(__name) {\r\n            __this = Lavosted.dom(this.__application__);\r\n            __this.forEach((val, key) => {\r\n                var _split = __name.split(' ');\r\n                _split.forEach((v, k) => {\r\n                    val.classList.remove(v);\r\n                });\r\n            });\r\n            return true;\r\n        }\r\n        toggleClass(__name) {\r\n            __this = Lavosted.dom(this.__application__);\r\n            __this.forEach((val, key) => {\r\n                var _split = __name.split(' ');\r\n                _split.forEach((v, k) => {\r\n                    val.classList.toggle(v);\r\n                });\r\n            });\r\n            return true;\r\n        }\r\n        text(__data) {\r\n            let _array = [];\r\n            __this = Lavosted.dom(this.__application__);\r\n            __this.forEach((val, key) => {\r\n                val.innerText = __data;\r\n            });\r\n            return true;\r\n        }\r\n        html(__data) {\r\n            let _array = [];\r\n            __this = Lavosted.dom(this.__application__);\r\n            __this.forEach((val, key) => {\r\n                val.innerHTML = __data;\r\n            });\r\n            return true;\r\n        }\r\n        /*storage*/\r\n        data(__data) {\r\n            try {\r\n                if (__data) {\r\n                    if (typeof __data == 'object') {\r\n                        if (__data.type == 'local') {\r\n                            if (__data.methods == 'get') {\r\n                                return localStorage.getItem(__data.name);\r\n                            }\r\n                            if (__data.methods == 'set') {\r\n                                return localStorage.setItem(__data.name, __data.data);\r\n                            }\r\n                        }\r\n                        if (__data.type == 'session') {\r\n                            if (__data.methods == 'get') {\r\n                                return sessionStorage.getItem(__data.name);\r\n                            }\r\n                            if (__data.methods == 'set') {\r\n                                return sessionStorage.setItem(__data.name, __data.data);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        var _array = [];\r\n                        __this = Lavosted.dom(this.__application__);\r\n                        __this.forEach((val, key) => {\r\n                            _array.push(val.getAttribute('data-' + __data));\r\n                        });\r\n                        return _array;\r\n                    }\r\n                } else {\r\n                    var _array = [];\r\n                    __this = Lavosted.dom(this.__application__);\r\n                    __this.forEach((val, key) => {\r\n                        _array.push(val.getAttribute('data-' + __data));\r\n                    });\r\n                    return _array;\r\n                }\r\n            } catch (e) {\r\n                console.error(e.message);\r\n            }\r\n        }\r\n        /*date*/\r\n        date() {\r\n        \tconst __date = new Date();\r\n        \tconst __data = {};\r\n        \t__data.date = function() { return __date.getDate(); }\r\n        \t__data.year = function() { return __date.getFullYear() }\r\n        \t__data.month = function() { return __date.getMonth(); }\r\n        \t__data.hours = function() { return __date.getHours(); }\r\n        \t__data.minutes = function() { return __date.getMinutes(); }\r\n        \t__data.seconds = function() { return __date.getSeconds(); }\r\n        \t__data.time = function() { return __date.getTime(); }\r\n        \t__data.now = function() { return __date; }\r\n        \treturn Object.create(__data);\r\n    \t}\r\n        /*json*/\r\n        parse() { return JSON.parse(this.__application__); }\r\n        stringify() { return JSON.stringify(this.__application__); }\r\n        /*time*/\r\n        interval(__call, __time) { setInterval(function() { __call(); }, __time); }\r\n        timeout(__call, __time) { setTimeout(function() { __call(); }, __time); }\r\n        /*array*/\r\n        isArray() { if (typeof this.__application__ == 'object') { return true; } else { return false; } }\r\n    }\r\n    /*prototype*/\r\n    Lavosted.prototype.database = Object.assign(___apps);\r\n    /*instance*/\r\n    L = function(__application__) {\r\n        return new Lavosted(__application__);\r\n    }\r\n})();\n\n//# sourceURL=webpack:///./src/js/lavosted.js?");

/***/ })

/******/ });